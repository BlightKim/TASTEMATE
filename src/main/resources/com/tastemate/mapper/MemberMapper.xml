<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tastemate.mapper.MemberMapper">

    <resultMap id="userStarResultMap" type="com.tastemate.domain.MemberVO">
        <id column="USER_IDX" property="userIdx"/>
        <result column="USER_ID" property="userId" />
        <result column="USER_NAME" property="userName" />
        <result column="USER_GENDER" property="userGender" />
        <result column="USER_ADDRESS" property="userAddress" />
        <result column="USER_CLASS" property="userClass" />
        <result column="USER_LIKE_FOOD" property="userLikeFood" />
        <result column="USER_MBTI" property="userMbti" />
        <collection property="starVO" ofType="StarVO">
            <id column="STAR_IDX" property="starIdx" />
            <result column="STORE_IDX" property="storeIdx" />
            <result column="USER_IDX" property="userIdx" />
            <result column="USER_STAR" property="userStar" />
        </collection>
    </resultMap>

    <select id="member_getClassList" resultType="com.tastemate.domain.MemberVO" parameterType="int">
        SELECT *
        FROM MEMBER WHERE USER_CLASS = #{userClass}
    </select>


    <select id="user_getWithStar" resultMap="userStarResultMap" parameterType="int">
        SELECT s.USER_IDX, s.USER_ID, s.USER_NAME, s.USER_GENDER, s.USER_ADDRESS, s.USER_CLASS, s.USER_LIKE_FOOD, s.USER_MBTI,
               avg_star.USER_STAR
        FROM MEMBER s
                 LEFT OUTER JOIN (
            SELECT USER_IDX, ROUND(AVG(USER_STAR), 1) AS USER_STAR
            FROM STAR
            GROUP BY USER_IDX
        ) avg_star ON s.USER_IDX = avg_star.USER_IDX
        WHERE USER_CLASS = #{userClass}
        ORDER BY s.USER_IDX

    </select>

    <select id="member_getList" resultType="com.tastemate.domain.MemberVO">
        select * from member
    </select>
    <!-- 멤버 추가 -->
    <insert id="user_join" parameterType="com.tastemate.domain.MemberVO">
        INSERT INTO MEMBER(USER_IDX, USER_ID, USER_PWD, USER_NAME, USER_GENDER, USER_PHONE, USER_ADDRESS,
                           USER_CLASS, USER_LIKE_FOOD, USER_DATE, USER_LOGINTYPE, USER_STATUS, USER_PROFILE,
                           USER_ORI_PROFILE, USER_TYPE, USER_MBTI, USER_EMAIL, USER_BIRTH)
        VALUES ((SELECT NVL(MAX(USER_IDX), 0) + 1 FROM MEMBER),
            #{userId}, #{userPwd}, #{userName}, #{userGender}, #{userPhone}, #{userAddress},
            #{userClass}, #{userLikeFood}, SYSDATE, 1, 0, #{userProfile},
            null, 1, #{userMbti}, #{userEmail}, #{userBirth} )
    </insert>

    <!-- 중복 ID 체크 -->
    <select id="checkId" resultType="integer">
        SELECT COUNT(USER_ID) as count FROM MEMBER WHERE USER_ID = #{userId}
    </select>

    <!-- 로그인(아이디) 체크 -->
    <select id="loginId" parameterType="String" resultType="com.tastemate.domain.MemberVO">
        SELECT * FROM MEMBER WHERE USER_ID = #{userId}
    </select>
    
    <select id="findUserByUserIdx" parameterType="integer" resultType="com.tastemate.domain.MemberVO">
        SELECT * FROM MEMBER WHERE USER_IDX = #{userIdx, jdbcType=INTEGER}
    </select>

    <!-- 개인정보 수정 -->
    <update id="userModify" parameterType="com.tastemate.domain.MemberVO">
        UPDATE MEMBER
        SET USER_NAME = #{userName},
            USER_EMAIL = #{userEmail},
            USER_PHONE = #{userPhone},
            USER_LIKE_FOOD = #{userLikeFood},
            USER_MBTI = #{userMbti},
            USER_ADDRESS = #{userAddress}
        WHERE USER_IDX = #{userIdx}
    </update>

    <update id="userStatus" parameterType="com.tastemate.domain.MemberVO">
        UPDATE MEMBER
        SET USER_STATUS = 1
        WHERE USER_IDX = #{userIdx}
    </update>

    <select id="findId" parameterType="String" resultType="com.tastemate.domain.MemberVO">
        SELECT * FROM MEMBER WHERE USER_EMAIL = #{userEmail}
    </select>
</mapper>